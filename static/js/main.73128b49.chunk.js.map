{"version":3,"sources":["components/Walk.jsx","components/WalksDisplay.jsx","components/WalksForm.jsx","components/WalksManager.jsx","App.js","reportWebVitals.js","index.js"],"names":["Walk","date","distance","removeWalk","className","onClick","WalksDisplay","walks","map","walk","format","dayjs","extend","customParseFormat","defaultWalk","WalksForm","addWalk","useState","updateWalk","onInputChange","event","prev","target","id","value","onSubmit","submit","preventDefault","isValid","isNaN","Number","htmlFor","onChange","name","initialWalks","walksSortFn","a","b","WalksManager","updateWalks","newWalk","walksCopy","foundIndex","findIndex","push","sort","walkToRemoveDateStr","walkToRemoveDate","splice","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73128b49.chunk.js","sourcesContent":["export default function Walk({ date, distance, removeWalk}) {\r\n  const onClickRemove = () => {\r\n    removeWalk(date);\r\n  };\r\n\r\n  return (\r\n    <div className=\"walk\">\r\n      <div>\r\n        {date}\r\n      </div>\r\n      <div>\r\n        {distance}\r\n      </div>\r\n      <div>\r\n        <span onClick={onClickRemove} className=\"walk-delete\">✗</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import Walk from \"./Walk\";\r\n\r\nexport default function WalksDisplay({ walks, removeWalk }) {\r\n  return (\r\n    <div className=\"walks-container\">\r\n      <div className=\"walks-header\">\r\n        <div>\r\n          Дата, ДД.ММ.ГГ\r\n        </div>\r\n        <div>\r\n          Пройдено, км.\r\n        </div>\r\n        <div>\r\n          Действия\r\n        </div>\r\n      </div>\r\n      {walks.map(walk =>\r\n        <Walk\r\n          date={walk.date.format('DD.MM.YY')}\r\n          distance={walk.distance}\r\n          key={walk.date.format('DD.MM.YY')}\r\n          removeWalk={removeWalk}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n","import { useState } from 'react';\r\nimport dayjs from 'dayjs';\r\nimport customParseFormat from 'dayjs/plugin/customParseFormat';\r\n\r\ndayjs.extend(customParseFormat);\r\n\r\nconst defaultWalk = {\r\n  date: '',\r\n  distance: ''\r\n};\r\n\r\nexport default function WalksForm({ addWalk }) {\r\n  const [walk, updateWalk] = useState(defaultWalk);\r\n\r\n  const onInputChange = (event) => {\r\n    updateWalk(prev => ({ ...prev, [event.target.id]: event.target.value }));\r\n  };\r\n\r\n  const formSubmit = (submit) => {\r\n    submit.preventDefault();\r\n\r\n    if (dayjs(walk.date, 'DD.MM.YY', true).isValid() && !isNaN(Number(walk.distance))) {\r\n      walk.date = dayjs(walk.date, 'DD.MM.YY', true);\r\n      walk.distance = +walk.distance;\r\n      addWalk(walk);\r\n      updateWalk({ ...defaultWalk });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={formSubmit} className=\"walks-form\">\r\n      <div className=\"input-wrapper\">\r\n        <label htmlFor=\"date\">Дата (ДД.ММ.ГГ)</label>\r\n        <input onChange={onInputChange} id=\"date\" name=\"date\" value={walk.date} />\r\n      </div>\r\n      <div className=\"input-wrapper\">\r\n        <label htmlFor=\"distance\">Пройдено, км.</label>\r\n        <input onChange={onInputChange} id=\"distance\" name=\"distance\" value={walk.distance} />\r\n      </div>\r\n      <button className=\"ok-btn\">OK</button>\r\n    </form>\r\n  )\r\n}\r\n","import { useState } from 'react';\r\nimport WalksDisplay from \"./WalksDisplay\";\r\nimport WalksForm from \"./WalksForm\";\r\nimport dayjs from 'dayjs';\r\n\r\nconst initialWalks = [\r\n  {\r\n    date: dayjs('12.02.21', 'DD.MM.YY', true),\r\n    distance: 5.2\r\n  },\r\n  {\r\n    date: dayjs('13.02.21', 'DD.MM.YY', true),\r\n    distance: 3\r\n  },\r\n  {\r\n    date: dayjs('14.02.21', 'DD.MM.YY', true),\r\n    distance: 7.6\r\n  },\r\n];\r\n\r\nconst walksSortFn = (a, b) => {\r\n  if (a.date > b.date) return 1;\r\n  if (a.date === b.date) return 0;\r\n  if (a.date < b.date) return -1;\r\n}\r\n\r\nexport default function WalksManager() {\r\n  const [walks, updateWalks] = useState(initialWalks);\r\n\r\n  const addWalk = newWalk => {\r\n    const walksCopy = [...walks];\r\n\r\n    let foundIndex = walksCopy.findIndex(walk => +walk.date === +newWalk.date);\r\n    if (foundIndex >= 0) {\r\n      walksCopy[foundIndex].distance += newWalk.distance;\r\n    } else {\r\n      walksCopy.push(newWalk);\r\n    }\r\n\r\n    walksCopy.sort(walksSortFn);\r\n\r\n    updateWalks(walksCopy);\r\n  };\r\n\r\n  const removeWalk = walkToRemoveDateStr => {\r\n    const walkToRemoveDate = dayjs(walkToRemoveDateStr, 'DD.MM.YY', true);\r\n    updateWalks(prev => {\r\n      const walksCopy = [...prev];\r\n      walksCopy.splice(prev.findIndex(walk => +walk.date === +walkToRemoveDate), 1);\r\n      return walksCopy;\r\n    });\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      <WalksForm addWalk={addWalk} />\r\n      <WalksDisplay walks={walks} removeWalk={removeWalk} />\r\n    </>\r\n  )\r\n}\r\n","import './App.css';\nimport WalksManager from './components/WalksManager';\n\nfunction App() {\n  return (\n    <WalksManager />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}